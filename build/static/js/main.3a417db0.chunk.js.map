{"version":3,"sources":["serviceWorker.js","piano.js","drum.js","guitar.js","innerIndex.js","index.js"],"names":["Boolean","window","location","hostname","match","home","reload","Piano","shiftKey","colorOn","playtime","chords","state","recordStatus","recordTune","beatPlayed","lengthPlayed","timePlayed","key","this","sound","socket","emit","e","setState","mapping","map","note","length","midiSounds","playChordNow","sendKeysFromPiano","push","Date","console","log","document","getElementById","innerHTML","disabled","ms","Promise","resolve","setTimeout","i","wait","on","selectedNote","playDrumsNow","className","id","contentEditable","style","color","onClick","toggleRecordStatus","bind","playRecord","resetRecord","handleKeys","onKeyEvent","changeColor","playPiano4","left","ref","appElementName","instruments","Component","Drum","selectedDrum","playBeat","sendKeysFromDrums","playDrum","src","Guitar","base","strum","playNote","sendKeysFromGuitar","playTune","playGuitar","send","instrument","openPiano","ReactDOM","render","StrictMode","openGuitar","openDrum","Menu","io","openMenu","room","value","sendRoomToJoin","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","Home","type","placeholder"],"mappings":"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","file":"static/js/main.3a417db0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component, useState} from \"react\";\nimport \"./App.css\";\nimport MIDISounds from \"midi-sounds-react\";\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { socket } from \".\";\n\n\nfunction home(){\n      window.location.reload();\n}\n\nclass Piano extends Component {\n  shiftKey = 0;\n  colorOn = 'x';\n  playtime = 0.5;\n  chords = 0;\n  //to track the status of recording\n  state = {\n    recordStatus: false,\n    recordTune: {\n      beatPlayed: [],\n      lengthPlayed: [],\n      timePlayed: []\n    }\n  };\n\n  changeColor(key) {\n    this.colorOn = key;\n  }\n\n  sendKeysFromPiano(sound)  {\n    socket.emit('sendFromPiano', sound);\n  }\n\n  playPiano4(key, e) {\n    if (key === \"space\") {\n      this.playtime = this.playtime % 2 + 0.5\n    }\n\n\n\n    if (key === 'shift') {\n      this.shiftKey = (this.shiftKey + 1) % 3\n    }\n\n    if (key === 'm'){\n      this.chords = (this.chords + 1) % 3\n    }\n\n    let playtime = this.playtime;\n\n    //don't delete...don't know why but we need this\n    this.setState({});\n\n    //create map of key to note\n    const mapping = [\n      ['a', 57],\n      ['w', 58],\n      ['s', 59],\n      ['d', 60],\n      ['r', 61],\n      ['f', 62],\n      ['t', 63],\n      ['g', 64],\n      ['h', 65],\n      ['u', 66],\n      ['j', 67],\n      ['i', 68],\n      ['k', 69],\n      ['o', 70],\n      ['l', 71],\n      [';', 72]\n    ];\n\n    let sound = null;\n\n    //if key is pressed, finds that key in the map and play corresponding note\n    if (this.shiftKey === 0) {\n      if (this.chords === 0) {\n        for (const map of mapping) {\n          if (key === map[0]) {\n            sound = {note:[map[1]], length:playtime};\n            // this.midiSounds.playChordNow(3, [map[1]], playtime);\n          }\n        }\n      }\n      else if (this.chords === 1) {\n        for (const map of mapping) {\n          if (key === map[0]) {\n            sound = {note:[map[1], map[1]+4, map[1]+7], length:playtime};\n            // this.midiSounds.playChordNow(3, [map[1], map[1]+4, map[1]+7], playtime);\n          }\n        }\n      }\n      else{\n        for (const map of mapping) {\n          if (key === map[0]) {\n            sound = {note:[map[1], map[1]+3, map[1]+7], length:playtime};\n            // this.midiSounds.playChordNow(3, [map[1], map[1]+3, map[1]+7], playtime);\n          }\n        }\n      }\n    }\n    //go up an octave\n    else if (this.shiftKey === 1) {\n      if (this.chords === 0) {\n        for (const map of mapping) {\n          if (key === map[0]) {\n            sound = {note:[map[1] + 12], length:playtime};\n            // this.midiSounds.playChordNow(3, [map[1] + 12], playtime);\n          }\n        }\n      }\n      else if (this.chords === 1) {\n        for (const map of mapping) {\n          if (key === map[0]) {\n            sound = {note:[map[1] + 12, map[1] + 16, map[1] + 19], length:playtime};\n            // this.midiSounds.playChordNow(3, [map[1] + 12, map[1] + 16, map[1] + 19], playtime);\n          }\n        }\n      }\n      else {\n        for (const map of mapping) {\n          if (key === map[0]) {\n            sound = {note:[map[1] + 12, map[1] + 15, map[1] + 19], length:playtime};\n            // this.midiSounds.playChordNow(3, [map[1] + 12, map[1] + 15, map[1] + 19], playtime);\n          }\n        }\n      }\n    }\n    //go down an octave\n    else if (this.shiftKey === 2) {\n      if (this.chords === 0) {\n        for (const map of mapping) {\n          if (key === map[0]) {\n            sound = {note:[map[1] - 12], length:playtime};\n            // this.midiSounds.playChordNow(3, [map[1] - 12], playtime);\n          }\n        }\n      }\n      else if (this.chords === 1) {\n        for (const map of mapping) {\n          if (key === map[0]) {\n            sound = {note:[map[1] - 12, map[1]-8, map[1]-5], length:playtime};\n            // this.midiSounds.playChordNow(3, [map[1] - 12, map[1]-8, map[1]-5], playtime);\n          }\n        }\n      }\n      else{\n        for (const map of mapping) {\n          if (key === map[0]) {\n            sound = {note:[map[1] - 12, map[1]-9, map[1]-5], length:playtime};\n            // this.midiSounds.playChordNow(3, [map[1] - 12, map[1]-9, map[1]-5], playtime);\n          }\n        }\n      }\n    }\n    if (sound != null) {\n      this.midiSounds.playChordNow(3, sound.note, sound.length);\n      this.sendKeysFromPiano(sound);\n      if (this.state.recordStatus)  {\n        this.state.recordTune.beatPlayed.push(sound.note);\n        this.state.recordTune.lengthPlayed.push(sound.length);\n        this.state.recordTune.timePlayed.push(new Date());\n        console.log(this.state.recordTune);\n      }\n    }\n\n  }\n  //flip record status from recording to not recording and vice versa\n  toggleRecordStatus()  {\n    this.state.recordStatus = !this.state.recordStatus;\n    if (this.state.recordStatus) {\n      document.getElementById('record-btn').innerHTML = 'Stop';\n    }\n    else{\n      document.getElementById('record-btn').innerHTML = 'Record';\n      document.getElementById('play-btn').disabled = false;\n    }\n  }\n  async wait(ms) {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  }\n  async playRecord() {\n    console.log('playing');\n    for (let i = 0; i < this.state.recordTune.beatPlayed.length; i++) {\n      await this.midiSounds.playChordNow(3, this.state.recordTune.beatPlayed[i], this.state.recordTune.lengthPlayed[i]);\n      console.log(i);\n      await this.wait(this.state.recordTune.timePlayed[i+1] - this.state.recordTune.timePlayed[i]);\n    }\n  }\n\n\n  //delete the previously recorded beats to start recording again from scratch\n  resetRecord(){\n    this.setState({ recordTune: {\n      beatPlayed: [],\n      lengthPlayed: [],\n      timePlayed: []\n    }\n  });\n  }\n\n\n\n  render(){\n    //send guitar chords played\n    socket.on('receiveFromGuitar', (selectedNote) => {\n      this.midiSounds.playChordNow(258, selectedNote, 1.5);\n    });\n\n    //send drum beats played\n    socket.on('receiveFromDrums', (key) => {\n      this.midiSounds.playDrumsNow(key);\n    });\n\n    //send piano played from other user (would this work? -> yes it will :)\n    socket.on('receiveFromPiano', (sound) => {\n      this.midiSounds.playChordNow(3, sound.note, sound.length);\n    });\n\n\n    /*formatting stuff mostly. Buttons call piano functions when clicked. The midi sounds logo gives volume options etc*/\n    return (\n        <div className=\"App\">\n          <header id = 'main-header'>\n            <div className=\"container\">\n              <h1 contentEditable>Travel Ban<span style={{color: '#9a0415'}}>d</span></h1>\n            </div>\n          </header>\n          <nav id=\"navbar\">\n            <div className=\"container\">\n              <ul>\n                <li><a onClick={home}>Home</a></li>\n                <li><a id=\"record-btn\" onClick={this.toggleRecordStatus.bind(this)}>Record</a></li>\n                <li><a id=\"play-btn\" onClick={this.playRecord.bind(this)}>Play</a></li>\n                <li><a onClick={this.resetRecord.bind(this)}>Reset</a></li>\n              </ul>\n            </div>\n          </nav>\n          <body>\n          <p className=\"App-intro\">Press buttons to play piano chords.</p>\n          <h1 className=\"Instructions\">Play keyboard like a piano: d = middle C.</h1>\n          <p>\n            <KeyboardEventHandler\n                handleKeys={['all']}\n                onKeyEvent={(key) =>\n                    this.changeColor(key)\n                } />\n            <KeyboardEventHandler\n                handleKeys={['all']}\n                onKeyEvent={(key, e) =>\n                    this.playPiano4(key, e)} />\n          </p>\n          <p>\n            <div className = 'piano-visual'>\n              <div className={this.colorOn === 'a' ? 'blue-key' : \"white-key\"} style={{left: 50}}>\n                <h3>A</h3>\n                <h4>a</h4>\n              </div>\n              <div className={this.colorOn === 's'? \"blue-key\" : \"white-key\"} style={{left:100}}>\n                <h3>B</h3>\n                <h4>s</h4>\n              </div>\n              <div className={this.colorOn === 'd' ? 'blue-key' : \"white-key\"} style={{left:150}}>\n                <h3>C</h3>\n                <h4>d</h4>\n              </div>\n              <div className={this.colorOn === 'f' ? 'blue-key' : \"white-key\"} style={{left:200}}>\n                <h3>D</h3>\n                <h4>f</h4>\n              </div>\n              <div className={this.colorOn === 'g' ? 'blue-key' : \"white-key\"} style={{left:250}}>\n                <h3>E</h3>\n                <h4>g</h4>\n              </div>\n              <div className={this.colorOn === 'h' ? 'blue-key' : \"white-key\"} style={{left:300}}>\n                <h3>F</h3>\n                <h4>h</h4>\n              </div>\n              <div className={this.colorOn === 'j' ? 'blue-key' : \"white-key\"} style={{left:350}}>\n                <h3>G</h3>\n                <h4>j</h4>\n              </div>\n              <div className={this.colorOn === 'k' ? 'blue-key' : \"white-key\"} style={{left:400}}>\n                <h3>A</h3>\n                <h4>k</h4>\n              </div>\n              <div className={this.colorOn === 'l' ? 'blue-key' : \"white-key\"} style={{left:450}}>\n                <h3>B</h3>\n                <h4>l</h4>\n              </div>\n              <div className={this.colorOn === ';' ? 'blue-key' : \"white-key\"} style={{left:500}}>\n                <h3>C</h3>\n                <h4>;</h4>\n              </div>\n              <div className={this.colorOn === 'w' ? 'black-blue-key' : \"black-key\"} style={{left: 85}}>\n                <h4>A#</h4>\n                <h5>w</h5>\n              </div>\n              <div className={this.colorOn === 'r' ? 'black-blue-key' : \"black-key\"} style={{left: 185}}>\n                <h4>C#</h4>\n                <h5>r</h5>\n              </div>\n              <div className={this.colorOn === 't' ? 'black-blue-key' : \"black-key\"} style={{left: 235}}>\n                <h4>D#</h4>\n                <h5>t</h5>\n              </div>\n              <div className={this.colorOn === 'u' ? 'black-blue-key' : \"black-key\"} style={{left: 335}}>\n                <h4>F#</h4>\n                <h5>u</h5>\n              </div>\n              <div className={this.colorOn === 'i' ? 'black-blue-key' : \"black-key\"} style={{left: 385}}>\n                <h4>G#</h4>\n                <h5>i</h5>\n              </div>\n              <div className={this.colorOn === 'o' ? 'black-blue-key' : \"black-key\"} style={{left: 435}}>\n                <h4>A#</h4>\n                <h5>o</h5>\n              </div>\n            </div>\n          </p>\n\n          <p><h3>Press shift to change octave</h3></p>\n          <p>Current Octave: {this.shiftKey === 0 ? \"Medium\" : (this.shiftKey === 1 ? \"High\" : \"Low\")}</p>\n          <p><h3>Hit Space to change length of the note.</h3></p>\n          <p>Current note length: {this.playtime === 0.5 ? \"Short\" : (this.playtime === 1 ? \"Medium\" : (this.playtime === 1.5 ? \"Long\" : \"Longest\"))}</p>\n          <p><h3>Press m for chords.</h3></p>\n          <p>Current chord setting: {this.chords === 0 ? \"Off\" : (this.chords === 1 ? \"Major\" : \"Minor\")}</p>\n          <p><h3>Hit Refresh to change instrument</h3></p>\n\n          <MIDISounds\n              ref={ref => (this.midiSounds = ref)}\n              appElementName=\"root\"\n              instruments={[3, 258]}\n          />\n          </body>\n        </div>\n    );\n  }\n}\n\nexport default Piano;\n","import React, { Component } from 'react';\nimport './drum.css';\nimport MIDISounds from 'midi-sounds-react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport {socket} from './index';\n\n\n\nfunction home(){\n  window.location.reload();\n}\n\n\nclass Drum extends Component {\n\n  //to track the status of recording\n  state = {\n    recordStatus: false,\n    recordTune: {\n      beatPlayed : [],\n      timePlayed : []\n    },\n  }\n\n  selectedDrum = [];\n\n  //play beat of selected drum component\n  playBeat(selectedDrum) {\n    this.midiSounds.playDrumsNow([selectedDrum]);\n\n    if (this.state.recordStatus)  {\n      this.state.recordTune.beatPlayed.push(selectedDrum);\n      this.state.recordTune.timePlayed.push(new Date())\n      console.log(this.state.recordTune);\n    }\n  }\n\n  //send keys from drum to server\n  sendKeysFromDrums(key)  {\n    socket.emit('sendFromDrums', key);\n  }\n\n  //handles keyboard input to play beat when corresponding key is pressed\n  playDrum(key) {\n\n    switch(key) {\n      case 'f': //Cymbal\n        this.playBeat(110);\n        this.sendKeysFromDrums([110]);\n        break;\n\n      case 'g': //Low Tom\n        this.playBeat(40);\n        this.sendKeysFromDrums([40]);\n        break;\n\n      case 't': //Mid Tom\n        this.playBeat(60);\n        this.sendKeysFromDrums([60]);\n        break;\n\n      case 'b': //Bass Drum\n        this.playBeat(5);\n        this.sendKeysFromDrums([5]);\n        break;\n\n      case 'y': //High Tom\n        this.playBeat(75);\n        this.sendKeysFromDrums([75]);\n        break;\n\n      case 'h': //Snare Drum\n        this.playBeat(15);\n        this.sendKeysFromDrums([15]);\n        break;\n\n      case 'j': //Hi-Hat\n        this.playBeat(35);\n        this.sendKeysFromDrums([35]);\n        break;\n    }\n  }\n\n  //flip record status from recording to not recording and vice versa\n  toggleRecordStatus()  {\n    this.state.recordStatus = !this.state.recordStatus;\n\n    if (this.state.recordStatus) {\n      document.getElementById('record-btn').innerHTML = 'Stop';\n    }\n    else{\n      document.getElementById('record-btn').innerHTML = 'Record';\n      document.getElementById('play-btn').disabled = false;\n    }\n  }\n\n  //asynchronous function that plays the recorded beats at an interval of 1 second each\n  async wait(ms) {\n    return new Promise(resolve => {\n      setTimeout(resolve, ms);\n    });\n  }\n  async playRecord()  {\n    console.log('playing')\n    for (let i = 0; i < this.state.recordTune.beatPlayed.length; i++)  {\n      await this.playBeat(this.state.recordTune.beatPlayed[i]);\n      console.log(i);\n      await this.wait(this.state.recordTune.timePlayed[i+1] - this.state.recordTune.timePlayed[i]);\n    }\n  }\n\n  //delete the previously recorded beats to start recording again from scratch\n  resetRecord() {\n    this.setState({ recordTune: {\n        beatPlayed: [],\n        timePlayed: []\n      }\n    });\n  }\n\n  render()  {\n    //send guitar chords played\n    socket.on('receiveFromGuitar', (selectedNote) => {\n      this.midiSounds.playChordNow(258, selectedNote, 1.5);\n    });\n\n    //send piano played\n    socket.on('receiveFromPiano', (sound) => {\n      this.midiSounds.playChordNow(3, sound.note, sound.length);\n    });\n\n    //send drum played from other users\n    socket.on('receiveFromDrums', (key) => {\n        this.midiSounds.playDrumsNow(key);\n    });\n\n    return (\n      <div className=\"Drum\">\n        <KeyboardEventHandler handleKeys={['all']} onKeyEvent={(key, e) => this.playDrum(key)} />\n        <header id = 'main-header'>\n          <div className=\"container\">\n            <h1 contentEditable>Travel Ban<span style={{color: '#9a0415'}}>d</span></h1>\n          </div>\n        </header>\n        <nav id=\"navbar\">\n          <div className=\"container\">\n            <ul>\n              <li><a onClick={home}>Home</a></li>\n              <li><a id=\"record-btn\" onClick={this.toggleRecordStatus.bind(this)}>Record</a></li>\n              <li><a id=\"play-btn\" onClick={this.playRecord.bind(this)}>Play</a></li>\n              <li><a onClick={this.resetRecord.bind(this)}>Reset</a></li>\n            </ul>\n          </div>\n        </nav>\n        <p>Click play only after you stop recording!#issue needs to be fixed-->disable playbutton while in recording mode</p>\n\n        <div className='relative'>\n         <img src = \"assets/images/drum_kit.png\"></img>\n        </div>\n\n        <p>Hit Refresh to change instrument</p>\n\n        <MIDISounds ref={(ref) => (this.midiSounds = ref)} appElementName=\"root\" instruments={[258, 3]} />\n      </div>\n    );\n  }\n}\n\nexport default Drum;\n","import React, {Component} from 'react';\nimport \"./App.css\";\nimport MIDISounds from 'midi-sounds-react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport {socket} from './index';\n\nfunction home(){\n    window.location.reload();\n}\n\n\nclass Guitar extends Component {\n    //to track the status of recording\n    shiftKey = 0;\n    chords = 0;\n    base = 60;\n    strum = false;\n\n    state = {\n        recordStatus: false,\n        recordTune: {\n            beatPlayed : [],\n            timePlayed : []\n        }\n    };\n\n    mapping = [\n        ['a', 45],\n        ['b', 47],\n        ['c', 48],\n        ['d', 50],\n        ['e', 52],\n        ['f', 53],\n        ['g', 55],\n    ];\n\n    playTune(selectedNote)    {\n        this.midiSounds.playChordNow(258, selectedNote, 1.5);\n    }\n\n    playNote(key, shiftKey, chords) {\n        let selectedNote = [];\n        for (const map of this.mapping) {\n\n            if (shiftKey === 0) {\n                if (chords === 0) {\n                    if (key === map[0]) {\n                        if (this.strum) {\n                            selectedNote = [map[1], map[1] + 7, map[1] + 12, map[1] + 16, map[1] + 19];\n                        }\n                        else{\n                            selectedNote = [map[1], map[1] + 7, map[1] + 12];\n                        }\n                        return selectedNote;\n                    }\n                }\n                if (chords === 1) {\n                    if (key === map[0]) {\n                        if (this.strum){\n                            selectedNote = [map[1], map[1] + 7, map[1] + 12, map[1] + 15, map[1] + 19];\n                        }\n                        else{\n                            selectedNote = [map[1], map[1] + 7, map[1] + 12];\n                        }\n                        return selectedNote;\n                    }\n                }\n            }\n            if (shiftKey === 1) {\n                this.base = map[1] + 1;\n                if (chords === 0) {\n                    if (key === map[0]) {\n                        if (this.strum) {\n                            selectedNote = [this.base, this.base + 7, this.base + 12, this.base + 16, this.base + 19];\n                        }\n                        else{\n                            selectedNote = [this.base, this.base + 7, this.base + 12];\n                        }\n                        return selectedNote;\n\n                    }\n                }\n                if (chords === 1) {\n                    if (key === map[0]) {\n                        if (this.strum) {\n                            selectedNote = [this.base, this.base + 7, this.base + 12, this.base + 16, this.base + 19];\n                        }\n                        else{\n                            selectedNote = [this.base, this.base + 7, this.base + 12];\n                        }\n                        return selectedNote;\n\n                    }\n                }\n            }\n        }\n\n        // for record function, copied from drum.js\n        if (this.state.recordStatus)  {\n            this.state.recordTune.beatPlayed.push(selectedNote);\n            this.state.recordTune.timePlayed.push(new Date())\n            console.log(this.state.recordTune);\n        }\n        return [];\n    }\n\n    //send notes from guitar to server\n    sendKeysFromGuitar(selectedNote)  {\n        socket.emit('sendFromGuitar', selectedNote);\n    }\n\n\n\n    playGuitar(key){\n        if (key === 'shift') {\n            this.shiftKey = (this.shiftKey + 1) % 2\n        }\n\n        if (key === 'm') {\n            this.chords = (this.chords + 1) % 2\n        }\n\n        this.strum = !this.strum;\n\n        this.setState({});\n\n\n        const selectedNote = this.playNote(key, this.shiftKey, this.chords);\n        if (selectedNote.length != 0)   {\n            this.sendKeysFromGuitar(selectedNote);\n            this.playTune(selectedNote);\n        }\n    }\n\n    //////////////JUST COPIED PASTED RECORD CODE FROM DRUM.JS//////////////////////////\n    //flip record status from recording to not recording and vice versa\n    toggleRecordStatus()  {\n        this.state.recordStatus = !this.state.recordStatus;\n        if (this.state.recordStatus) {\n            document.getElementById('record-btn').innerHTML = 'Stop';\n            console.log(this.state.recordStatus)\n        }\n        else{\n            document.getElementById('record-btn').innerHTML = 'Record';\n            document.getElementById('play-btn').disabled = false;\n        }\n    }\n\n    //asynchronous function that plays the recorded beats at an interval of 1 second each\n    async wait(ms) {\n        return new Promise(resolve => {\n            setTimeout(resolve, ms);\n        });\n    }\n    async playRecord() {\n        console.log('playing');\n        for (let i = 0; i < this.state.recordTune.beatPlayed.length; i++) {\n            await this.midiSounds.playChordNow(258, this.state.recordTune.beatPlayed[i], 1.5);\n            console.log(i);\n            await this.wait(this.state.recordTune.timePlayed[i+1] - this.state.recordTune.timePlayed[i]);\n        }\n    }\n\n\n    //delete the previously recorded beats to start recording again from scratch\n    resetRecord(){\n        this.setState({ recordTune: {\n            beatPlayed: [],\n            timePlayed: []\n          }\n        });\n    }\n    //////////////////COPY OF RECORD CODE ENDS HERE////////////////////////////////////////////\n\n\n    render(){\n        //send drum beats played\n        socket.on('receiveFromDrums', (key) => {\n            this.midiSounds.playDrumsNow(key);\n        });\n\n        //send piano played\n        socket.on('receiveFromPiano', (sound) => {\n            this.midiSounds.playChordNow(3, sound.note, sound.length);\n        });\n\n        //send guitar played from other users\n        socket.on('receiveFromGuitar', (selectedNote) => {\n          this.midiSounds.playChordNow(258, selectedNote, 1.5);\n        });\n\n        return(\n            <div className=\"App\">\n                <header id = 'main-header'>\n                    <div className=\"container\">\n                        <h1 contentEditable>Travel Ban<span style={{color: '#9a0415'}}>d</span></h1>\n                    </div>\n                </header>\n                <nav id=\"navbar\">\n                    <div className=\"container\">\n                        <ul>\n                            <li><a onClick={home}>Home</a></li>\n                            <li><a id=\"record-btn\" onClick={this.toggleRecordStatus.bind(this)}>Record</a></li>\n                            <li><a id=\"play-btn\" onClick={this.playRecord.bind(this)}>Play</a></li>\n                            <li><a onClick={this.resetRecord.bind(this)}>Reset</a></li>\n                        </ul>\n                    </div>\n                </nav>\n                <p className=\"App-intro\">Press the letter of the chord you want to play ('a' = A major).</p>\n                <KeyboardEventHandler handleKeys={['all']} onKeyEvent={(key, e) => this.playGuitar(key)}/>\n                <p>Click play only after you stop recording!#issue needs to be fixed-->disable playbutton while in recording mode</p>\n                <div className='image'></div>\n                <p><h3>Press shift to change between natural chords and sharp/flats.</h3></p>\n                <p>Current chord type: {this.shiftKey === 0 ? \"Natural\" : \"Sharp/Flat\"}</p>\n                <p><h3>Press m to toggle between major and minor chords.</h3></p>\n                <p>Current chord setting: {this.chords === 0 ? \"Major\" : \"Minor\"}</p>\n                <p><h3>Hit Refresh to change instrument</h3></p>\n\n                <MIDISounds ref={(ref) => (this.midiSounds = ref)} appElementName=\"root\" instruments={[258, 3]}/>\n            </div>\n        )\n    }\n}\n\nexport default Guitar;\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Piano from './piano';\nimport Drum from './drum';\nimport Guitar from './guitar';\nimport {socket} from './index';\n\n//send sockets attaching connection\nfunction send(instrument) {\n  socket.emit('selected instrument', instrument);\n\n}\n\n//opens up piano player\nfunction openPiano()  {\n  send(\"Piano\");\n  ReactDOM.render(\n    <React.StrictMode>\n      <Piano />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\n//opens up guitar player\nfunction openGuitar()  {\n    send(\"Guitar\");\n    ReactDOM.render(\n        <React.StrictMode>\n            <Guitar />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n//opens up drum kit\nfunction openDrum() {\n  send(\"Drums\");\n  ReactDOM.render(\n    <React.StrictMode>\n      <Drum />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\n\n\nclass Menu extends Component {\n\n    render() {\n        return(\n            <div>\n                <body>\n                <header id=\"main-header\">\n                    <div className=\"container\">\n                        <h1 contentEditable>Travel Ban<span style={{color: '#9a0415'}}>d</span></h1>\n                    </div>\n                </header>\n                <nav id=\"navbar\">\n                    <div className=\"container\">\n                        <ul>\n                            <li><a onClick = \"window.location.reload();\">Home</a></li>\n                            <li><a onClick = {openDrum}>Drums</a></li>\n                            <li><a onClick = {openGuitar}>Guitar</a></li>\n                            <li><a onClick = {openPiano}>Piano</a></li>\n                        </ul>\n                    </div>\n                </nav>\n                <section id=\"showcase\"><div className=\"container\">\n                    <h1>Miss jamming out with your friends? Connect from anywhere and play together in real-time.\n                    </h1>\n                    <h2>Choose an instrument from the navbar to get started.</h2>\n                </div></section>\n                <section id=\"image\"><div className=\"container\"></div></section>\n                </body>\n                <footer id=\"main-footer\">\n                    <h3>Copyright 2020 Travel Band -- Image by HaoMin SiMa</h3>\n                </footer>\n            </div>\n        );\n    }\n}\n\nexport default Menu;\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport io from \"socket.io-client\";\nimport Menu from './innerIndex';\n\nexport const socket = io();\n\nfunction sendRoomToJoin()    {\n    var room = document.getElementById(\"myRoomJoin\").value;\n    socket.emit('roomToJoin', room);\n}\n\n//open up instrument choice menu\nfunction openMenu() {\n    sendRoomToJoin();\n    ReactDOM.render(\n        <React.StrictMode>\n            <Menu />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nclass Home extends Component {\n\n    render() {\n        return(\n            <div>\n                <body>\n                <header id=\"main-header\">\n                    <div className=\"container\">\n                        <h1 contentEditable>Travel Ban<span style={{color: '#9a0415'}}>d</span></h1>\n                    </div>\n                </header>\n                <nav id=\"navbar\">\n                    <div className=\"container\">\n                        <ul>\n                            <li><a onClick = \"window.location.reload();\">Home</a></li>\n                            <input type=\"text\" placeholder=\"enter room id to join/create\" id=\"myRoomJoin\" />\n                            <button type=\"button\" onClick={openMenu}>Join</button>\n                        </ul>\n                    </div>\n                </nav>\n                <section id=\"showcase\"><div className=\"container\">\n                    <h1>Miss jamming out with your friends? Connect from anywhere and play together in real-time.\n                    </h1>\n                    <h2>Choose an instrument from the navbar to get started.</h2>\n                </div></section>\n                <section id=\"image\"><div className=\"container\"></div></section>\n                </body>\n                <footer id=\"main-footer\">\n                    <h3>Copyright 2020 Travel Band -- Image by HaoMin SiMa</h3>\n                </footer>\n            </div>\n        );\n    }\n}\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\nexport default Home;\n"],"sourceRoot":""}